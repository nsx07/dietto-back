// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  NUTRITIONIST
  PATIENT
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   
  password  String   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  roles     Role
  contact   Contact?
  nutritionist Nutritionist?
  patient    Patient?

  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Patient {
  id              String   @id @default(uuid())
  userId          String   @unique
  birthDate       DateTime
  gender          Gender   

  user            User     @relation(fields: [userId], references: [id])
  appointments    Appointment[]

  @@map("patients")
}

model Specialty {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?

  nutritionists Nutritionist[]

  @@map("specialties")
}

model Nutritionist {
  id           String   @id @default(uuid())
  userId       String   @unique
  crn          String   @unique

  user         User     @relation(fields: [userId], references: [id])
  appointments Appointment[]
  specialties  Specialty[]

  @@map("nutritionists")
}

model Contact {
  id      String @id @default(uuid())
  userId  String @unique
  email   String @unique
  phone   String? @unique

  emailConfirmed Boolean @default(false)
  phoneConfirmed Boolean @default(false)

  address String? 
  number  String?
  city    String?
  state   String?
  country String? 
  zipCode String?  

  user    User   @relation(fields: [userId], references: [id])

  @@map("contacts")
}

enum AppointmentStatus {
  SCHEDULED
  CANCELED
  DONE
}

model Appointment {
  id             String   @id @default(uuid())
  nutritionistId String
  patientId      String
  scheduledAt    DateTime
  status         AppointmentStatus   @default(SCHEDULED)

  nutritionist   Nutritionist @relation(fields: [nutritionistId], references: [id])
  patient        Patient      @relation(fields: [patientId], references: [id])

  @@map("appointments")
}

// model Plan {
//   id          String   @id @default(uuid())
//   name        String   @unique 
//   planCode    String   @unique
//   description String?  
//   price       Float    
//   duration    Int      
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   subscriptions Subscription[]

//   @@map("plans")
// }

// enum SubscriptionStatus {
//   ACTIVE
//   INACTIVE
// }

// model Subscription {
//   id             String   @id @default(uuid())
//   userId         String   
//   planId         String
//   startDate      DateTime @default(now())
//   endDate        DateTime?
//   status         SubscriptionStatus @default(INACTIVE)
//   lastPaymentDate DateTime?
//   nextPaymentDate DateTime?

//   user           User     @relation(fields: [userId], references: [id])
//   plan           Plan     @relation(fields: [planId], references: [id])
//   payments       SubscriptionPayment[]

//   @@map("subscriptions")
// }

// enum PaymentStatus {
//   PAID
//   PENDING
//   CANCELED
// } 

// enum PaymentMethod {
//   CREDIT_CARD
//   DEBIT_CARD
//   BOLETO
//   PIX
// }

// model SubscriptionPayment {
//   id              String   @id @default(uuid())
//   subscriptionId  String
//   paymentDate     DateTime @default(now())
//   amount          Float
//   paymentMethod   PaymentMethod
//   paymentStatus   PaymentStatus  @default(PENDING)

//   subscription    Subscription @relation(fields: [subscriptionId], references: [id])

//   @@map("payments")
// }